{"version":3,"file":"static/js/236.6a8e7a4b.chunk.js","mappings":"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","sources":["pages/EmailVerification.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useSearchParams, useNavigate } from 'react-router-dom';\r\nimport { useToastContext } from '../components/toast';\r\n\r\nconst API_BASE = process.env.REACT_APP_API_BASE_URL;\r\n\r\nconst EmailVerification = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const [status, setStatus] = useState('verifying');\r\n  const [email, setEmail] = useState('');\r\n  const navigate = useNavigate();\r\n  const { showToast } = useToastContext();\r\n\r\n  useEffect(() => {\r\n    const token = searchParams.get('token');\r\n    console.log('üîç Token from URL:', token); // Debug log\r\n    \r\n    if (token) {\r\n      verifyEmail(token);\r\n    } else {\r\n      console.error('‚ùå No token found in URL');\r\n      setStatus('no-token');\r\n    }\r\n  }, [searchParams]);\r\n\r\n  const verifyEmail = async (token) => {\r\n    console.log('üìß Verifying email with token:', token?.substring(0, 20) + '...');\r\n    \r\n    try {\r\n      const response = await fetch(`${API_BASE}/auth/verify-email`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ token: token })\r\n      });\r\n\r\n      console.log('üì° Response status:', response.status);\r\n      const data = await response.json();\r\n      console.log('üì° Response data:', data);\r\n\r\n      if (response.ok) {\r\n        setStatus('success');\r\n        showToast('Email verified successfully!', 'success');\r\n        setTimeout(() => navigate('/login'), 3000);\r\n      } else {\r\n        console.error('‚ùå Verification failed:', data);\r\n        setStatus('error');\r\n        showToast(data.detail || 'Verification failed', 'error');\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Network error:', error);\r\n      setStatus('error');\r\n      showToast('Verification failed', 'error');\r\n    }\r\n  };\r\n\r\n  const resendVerification = async (e) => {\r\n    e.preventDefault();\r\n    if (!email) {\r\n      showToast('Please enter your email address', 'error');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${API_BASE}/auth/resend-verification`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email })\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (response.ok) {\r\n        showToast('Verification email sent!', 'success');\r\n        setEmail('');\r\n      } else {\r\n        showToast(data.detail || 'Failed to send email', 'error');\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Resend error:', error);\r\n      showToast('Failed to send email', 'error');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"auth-page\">\r\n      <div className=\"container\">\r\n        <div className=\"auth-form\">\r\n          {status === 'verifying' && (\r\n            <>\r\n              <h1>üîê Verifying Email...</h1>\r\n              <p>Please wait while we verify your email address.</p>\r\n            </>\r\n          )}\r\n\r\n          {status === 'success' && (\r\n            <>\r\n              <h1>‚úÖ Email Verified!</h1>\r\n              <p>Your email has been successfully verified. You can now log in to your account.</p>\r\n              <p>Redirecting to login page...</p>\r\n            </>\r\n          )}\r\n\r\n          {status === 'error' && (\r\n            <>\r\n              <h1>‚ùå Verification Failed</h1>\r\n              <p>The verification link is invalid or has expired.</p>\r\n              <form onSubmit={resendVerification}>\r\n                <input\r\n                  type=\"email\"\r\n                  placeholder=\"Enter your email to resend verification\"\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                  required\r\n                />\r\n                <button type=\"submit\" className=\"btn btn-primary\">\r\n                  Resend Verification Email\r\n                </button>\r\n              </form>\r\n            </>\r\n          )}\r\n\r\n          {status === 'no-token' && (\r\n            <>\r\n              <h1>‚ùå Invalid Link</h1>\r\n              <p>No verification token found in the URL.</p>\r\n              <form onSubmit={resendVerification}>\r\n                <input\r\n                  type=\"email\"\r\n                  placeholder=\"Enter your email to resend verification\"\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                  required\r\n                />\r\n                <button type=\"submit\" className=\"btn btn-primary\">\r\n                  Send Verification Email\r\n                </button>\r\n              </form>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmailVerification;"],"names":["API_BASE","process","REACT_APP_API_BASE_URL","EmailVerification","searchParams","useSearchParams","status","setStatus","useState","email","setEmail","navigate","useNavigate","showToast","useToastContext","useEffect","token","get","verifyEmail","async","response","fetch","concat","method","headers","body","JSON","stringify","data","json","ok","setTimeout","detail","error","resendVerification","e","preventDefault","_jsx","className","children","_jsxs","_Fragment","onSubmit","type","placeholder","value","onChange","target","required"],"sourceRoot":""}