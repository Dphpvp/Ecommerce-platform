{"version":3,"file":"static/js/63.31b2cec8.chunk.js","mappings":"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","sources":["pages/Checkout.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useCart } from '../contexts/CartContext';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { useToastContext } from '../components/toast';\r\n\r\nconst API_BASE = process.env.REACT_APP_API_BASE_URL;\r\n\r\nconst Checkout = () => {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const { cartItems, clearCart } = useCart();\r\n  const { user, makeAuthenticatedRequest, loading: authLoading } = useAuth();\r\n  const navigate = useNavigate();\r\n  const { showToast } = useToastContext();\r\n  const [processing, setProcessing] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [shippingAddress, setShippingAddress] = useState({\r\n    street: '',\r\n    city: '',\r\n    state: '',\r\n    zipCode: '',\r\n    country: ''\r\n  });\r\n\r\n  // Redirect if not authenticated\r\n  useEffect(() => {\r\n    if (!authLoading && !user) {\r\n      showToast('Please log in to complete your order', 'error');\r\n      navigate('/login?redirect=/checkout');\r\n    }\r\n  }, [user, authLoading, navigate, showToast]);\r\n\r\n  const total = cartItems.reduce((sum, item) => \r\n    sum + (item.product.price * item.quantity), 0\r\n  );\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    setError(null);\r\n    \r\n    if (!stripe || !elements) {\r\n      setError('Payment system not ready. Please try again.');\r\n      return;\r\n    }\r\n\r\n    if (!user) {\r\n      setError('Please log in to complete your order');\r\n      navigate('/login?redirect=/checkout');\r\n      return;\r\n    }\r\n\r\n    if (cartItems.length === 0) {\r\n      setError('Your cart is empty');\r\n      navigate('/cart');\r\n      return;\r\n    }\r\n    \r\n    setProcessing(true);\r\n\r\n    try {\r\n      // FIXED: Use correct payment endpoint path\r\n      const intentData = await makeAuthenticatedRequest(`${API_BASE}/payment/create-intent`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({ amount: Math.round(total * 100) })\r\n      });\r\n\r\n      const { client_secret } = intentData;\r\n\r\n      if (!client_secret) {\r\n        throw new Error('Failed to create payment intent');\r\n      }\r\n\r\n      // Confirm payment with Stripe\r\n      const { error: paymentError, paymentIntent } = await stripe.confirmCardPayment(client_secret, {\r\n        payment_method: {\r\n          card: elements.getElement(CardElement),\r\n        }\r\n      });\r\n\r\n      if (paymentError) {\r\n        throw new Error(paymentError.message);\r\n      }\r\n\r\n      if (paymentIntent.status === 'succeeded') {\r\n        // Create order with proper authentication\r\n        try {\r\n          const orderData = await makeAuthenticatedRequest(`${API_BASE}/orders`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n              shipping_address: shippingAddress,\r\n              payment_method: 'card',\r\n              payment_intent_id: paymentIntent.id\r\n            })\r\n          });\r\n\r\n          // Success - clear cart and redirect\r\n          clearCart();\r\n          showToast('Order placed successfully!', 'success');\r\n          navigate(`/orders`);\r\n          \r\n        } catch (orderError) {\r\n          console.error('Order creation failed:', orderError);\r\n          setError(`Order creation failed: ${orderError.message}`);\r\n          \r\n          // Payment succeeded but order failed - show specific error\r\n          showToast('Payment processed but order creation failed. Please contact support.', 'error');\r\n        }\r\n      } else {\r\n        throw new Error('Payment was not completed successfully');\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Checkout error:', error);\r\n      setError(error.message || 'Checkout failed. Please try again.');\r\n      showToast(error.message || 'Checkout failed', 'error');\r\n    } finally {\r\n      setProcessing(false);\r\n    }\r\n  };\r\n\r\n  // Show loading state while checking authentication\r\n  if (authLoading) {\r\n    return (\r\n      <div className=\"checkout\">\r\n        <div className=\"container\">\r\n          <h1>Loading...</h1>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Redirect if not authenticated\r\n  if (!user) {\r\n    return (\r\n      <div className=\"checkout\">\r\n        <div className=\"container\">\r\n          <h1>Redirecting to login...</h1>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"checkout\">\r\n      <div className=\"container\">\r\n        <h1>Checkout</h1>\r\n        \r\n        {error && (\r\n          <div className=\"error-message\" style={{ marginBottom: '1rem' }}>\r\n            {error}\r\n          </div>\r\n        )}\r\n        \r\n        <div className=\"checkout-content\">\r\n          <div className=\"order-summary\">\r\n            <h3>Order Summary</h3>\r\n            {cartItems.map(item => (\r\n              <div key={item.id} className=\"order-item\">\r\n                <span>{item.product.name} x {item.quantity}</span>\r\n                <span>${(item.product.price * item.quantity).toFixed(2)}</span>\r\n              </div>\r\n            ))}\r\n            <div className=\"order-total\">\r\n              <strong>Total: ${total.toFixed(2)}</strong>\r\n            </div>\r\n          </div>\r\n\r\n          <form onSubmit={handleSubmit} className=\"checkout-form\">\r\n            <div className=\"shipping-section\">\r\n              <h3>Shipping Address</h3>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Street Address\"\r\n                value={shippingAddress.street}\r\n                onChange={(e) => setShippingAddress({...shippingAddress, street: e.target.value})}\r\n                required\r\n              />\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"City\"\r\n                value={shippingAddress.city}\r\n                onChange={(e) => setShippingAddress({...shippingAddress, city: e.target.value})}\r\n                required\r\n              />\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"State\"\r\n                value={shippingAddress.state}\r\n                onChange={(e) => setShippingAddress({...shippingAddress, state: e.target.value})}\r\n                required\r\n              />\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Zip Code\"\r\n                value={shippingAddress.zipCode}\r\n                onChange={(e) => setShippingAddress({...shippingAddress, zipCode: e.target.value})}\r\n                required\r\n              />\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Country\"\r\n                value={shippingAddress.country}\r\n                onChange={(e) => setShippingAddress({...shippingAddress, country: e.target.value})}\r\n                required\r\n              />\r\n            </div>\r\n\r\n            <div className=\"payment-section\">\r\n              <h3>Payment Information</h3>\r\n              <div className=\"card-element\">\r\n                <CardElement \r\n                  options={{\r\n                    style: {\r\n                      base: {\r\n                        fontSize: '16px',\r\n                        color: '#424770',\r\n                        '::placeholder': {\r\n                          color: '#aab7c4',\r\n                        },\r\n                      },\r\n                    },\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <button \r\n              type=\"submit\" \r\n              disabled={!stripe || processing || cartItems.length === 0}\r\n              className=\"btn btn-primary\"\r\n            >\r\n              {processing ? 'Processing...' : `Pay $${total.toFixed(2)}`}\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Checkout;"],"names":["API_BASE","process","REACT_APP_API_BASE_URL","Checkout","stripe","useStripe","elements","useElements","cartItems","clearCart","useCart","user","makeAuthenticatedRequest","loading","authLoading","useAuth","navigate","useNavigate","showToast","useToastContext","processing","setProcessing","useState","error","setError","shippingAddress","setShippingAddress","street","city","state","zipCode","country","useEffect","total","reduce","sum","item","product","price","quantity","_jsx","className","children","_jsxs","style","marginBottom","map","name","toFixed","id","onSubmit","async","event","preventDefault","length","intentData","concat","method","body","JSON","stringify","amount","Math","round","client_secret","Error","paymentError","paymentIntent","confirmCardPayment","payment_method","card","getElement","CardElement","message","status","shipping_address","payment_intent_id","orderError","type","placeholder","value","onChange","e","_objectSpread","target","required","options","base","fontSize","color","disabled"],"sourceRoot":""}