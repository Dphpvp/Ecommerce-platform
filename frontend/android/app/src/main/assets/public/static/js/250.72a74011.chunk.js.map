{"version":3,"file":"static/js/250.72a74011.chunk.js","mappings":"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","sources":["pages/ResetPassword.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Link, useSearchParams } from 'react-router-dom';\r\nimport { useToastContext } from '../components/toast';\r\nimport mobileCaptcha from '../utils/mobileCaptcha';\r\nimport { secureFetch } from '../utils/csrf';\r\nimport platformDetection from '../utils/platformDetection';\r\nimport '../styles/mobileCaptcha.css';\r\n\r\nconst API_BASE = process.env.REACT_APP_API_BASE_URL;\r\n\r\nconst ResetPassword = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const token = searchParams.get('token');\r\n  const { showToast } = useToastContext();\r\n  \r\n  const [step, setStep] = useState(token ? 'reset' : 'request');\r\n  const [loading, setLoading] = useState(false);\r\n  const [recaptchaLoaded, setRecaptchaLoaded] = useState(false);\r\n  const [recaptchaWidgetId, setRecaptchaWidgetId] = useState(null);\r\n  const recaptchaRef = useRef(null);\r\n  \r\n  const [requestForm, setRequestForm] = useState({\r\n    email: ''\r\n  });\r\n  \r\n  const [resetForm, setResetForm] = useState({\r\n    password: '',\r\n    confirmPassword: ''\r\n  });\r\n  \r\n  const [errors, setErrors] = useState({});\r\n\r\n  // Initialize mobile captcha\r\n  useEffect(() => {\r\n    if (step !== 'request') return; // Only load for request step\r\n\r\n    const initializeCaptcha = async () => {\r\n      try {\r\n        await mobileCaptcha.initialize({\r\n          siteKey: process.env.REACT_APP_RECAPTCHA_SITE_KEY,\r\n          onLoad: () => setRecaptchaLoaded(true),\r\n          onComplete: (response) => {\r\n            console.log('Captcha completed:', response);\r\n          },\r\n          onExpired: () => {\r\n            console.log('Captcha expired');\r\n            showToast('Security verification expired. Please complete it again.', 'warning');\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.error('Failed to initialize captcha:', error);\r\n        showToast('Failed to load security verification. Please refresh the page.', 'error');\r\n      }\r\n    };\r\n\r\n    initializeCaptcha();\r\n  }, [step, showToast]);\r\n\r\n  // Render captcha widget when loaded and form is shown\r\n  useEffect(() => {\r\n    if (recaptchaLoaded && step === 'request' && recaptchaRef.current && !recaptchaWidgetId) {\r\n      try {\r\n        const widgetId = mobileCaptcha.render(recaptchaRef.current, {\r\n          sitekey: process.env.REACT_APP_RECAPTCHA_SITE_KEY,\r\n          callback: (response) => {\r\n            console.log('Captcha completed:', response);\r\n          },\r\n          'expired-callback': () => {\r\n            console.log('Captcha expired');\r\n            showToast('Security verification expired. Please complete it again.', 'warning');\r\n          }\r\n        });\r\n        setRecaptchaWidgetId(widgetId);\r\n      } catch (error) {\r\n        console.error('Captcha render error:', error);\r\n        showToast('Failed to load security verification. Please refresh the page.', 'error');\r\n      }\r\n    }\r\n  }, [recaptchaLoaded, step, showToast]);\r\n\r\n  const handleRequestChange = (e) => {\r\n    setRequestForm({ ...requestForm, [e.target.name]: e.target.value });\r\n    if (errors[e.target.name]) {\r\n      setErrors({ ...errors, [e.target.name]: '' });\r\n    }\r\n  };\r\n\r\n  const handleResetChange = (e) => {\r\n    setResetForm({ ...resetForm, [e.target.name]: e.target.value });\r\n    if (errors[e.target.name]) {\r\n      setErrors({ ...errors, [e.target.name]: '' });\r\n    }\r\n  };\r\n\r\n  const validateResetForm = () => {\r\n    const newErrors = {};\r\n    \r\n    if (!resetForm.password) {\r\n      newErrors.password = 'Password is required';\r\n    } else if (resetForm.password.length < 6) {\r\n      newErrors.password = 'Password must be at least 6 characters';\r\n    }\r\n    \r\n    if (!resetForm.confirmPassword) {\r\n      newErrors.confirmPassword = 'Please confirm your password';\r\n    } else if (resetForm.password !== resetForm.confirmPassword) {\r\n      newErrors.confirmPassword = 'Passwords do not match';\r\n    }\r\n    \r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  // Request submit with proper captcha handling\r\n  const handleRequestSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!requestForm.email) {\r\n      setErrors({ email: 'Email is required' });\r\n      return;\r\n    }\r\n\r\n    // Get captcha response\r\n    let captchaResponse = '';\r\n    try {\r\n      captchaResponse = mobileCaptcha.getResponse(recaptchaWidgetId);\r\n    } catch (error) {\r\n      console.error('Captcha error:', error);\r\n    }\r\n\r\n    if (!captchaResponse) {\r\n      const errorMessage = 'Please complete the security verification';\r\n      setErrors({ captcha: errorMessage });\r\n      await platformDetection.showToast(errorMessage, 3000);\r\n      return;\r\n    }\r\n    \r\n    setLoading(true);\r\n    let loadingIndicator = null;\r\n    \r\n    try {\r\n      // Show platform-appropriate loading\r\n      loadingIndicator = await platformDetection.showLoading('Sending reset email...');\r\n      if (loadingIndicator?.present) await loadingIndicator.present();\r\n\r\n      const response = await secureFetch(`${API_BASE}/auth/request-password-reset`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          email: requestForm.email,\r\n          recaptcha_response: captchaResponse\r\n        }),\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (response.ok) {\r\n        showToast('Password reset email sent! Check your inbox.', 'success');\r\n        await platformDetection.showToast('Password reset email sent! Check your inbox.', 3000);\r\n        setStep('sent');\r\n      } else {\r\n        const errorMessage = data.detail || 'Failed to send reset email';\r\n        showToast(errorMessage, 'error');\r\n        await platformDetection.showToast(errorMessage, 3000);\r\n        \r\n        // Reset captcha on error\r\n        if (recaptchaWidgetId !== null) {\r\n          mobileCaptcha.reset(recaptchaWidgetId);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Reset request error:', error);\r\n      \r\n      // Enhanced mobile error handling\r\n      let errorMessage = 'Network error. Please try again.';\r\n      \r\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n        errorMessage = 'Connection failed. Please check your internet connection.';\r\n      } else if (error.status === 429) {\r\n        errorMessage = 'Too many requests. Please try again later.';\r\n      } else if (error.status >= 500) {\r\n        errorMessage = 'Server error. Please try again later.';\r\n      }\r\n      \r\n      showToast(errorMessage, 'error');\r\n      await platformDetection.showToast(errorMessage, 4000);\r\n      \r\n      // Reset captcha on error\r\n      if (recaptchaWidgetId !== null) {\r\n        mobileCaptcha.reset(recaptchaWidgetId);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n      if (loadingIndicator?.dismiss) await loadingIndicator.dismiss();\r\n    }\r\n  };\r\n\r\n  const handleResetSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!validateResetForm()) return;\r\n    \r\n    setLoading(true);\r\n    \r\n    try {\r\n      const response = await fetch(`${API_BASE}/auth/reset-password`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          token: token,\r\n          new_password: resetForm.password\r\n        })\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (response.ok) {\r\n        showToast('Password reset successfully! You can now login.', 'success');\r\n        setStep('success');\r\n      } else {\r\n        showToast(data.detail || 'Failed to reset password', 'error');\r\n      }\r\n    } catch (error) {\r\n      showToast('Network error. Please try again.', 'error');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (step === 'sent') {\r\n    return (\r\n      <div className=\"auth-page\">\r\n        <div className=\"container\">\r\n          <div className=\"auth-form\">\r\n            <h1>Check Your Email</h1>\r\n            <div className=\"success-message\">\r\n              <p>We've sent a password reset link to <strong>{requestForm.email}</strong></p>\r\n              <p>Check your inbox and click the link to reset your password.</p>\r\n            </div>\r\n            <Link to=\"/login\" className=\"btn btn-primary\" style={{ display: 'inline-block', padding: '12px 30px', textDecoration: 'none', borderRadius: '6px', fontWeight: 'bold' }}>\r\n              Back to Login\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (step === 'success') {\r\n    return (\r\n      <div className=\"auth-page\">\r\n        <div className=\"container\">\r\n          <div className=\"auth-form\">\r\n            <h1>Password Reset Complete</h1>\r\n            <div className=\"success-message\">\r\n              <p>Your password has been successfully reset!</p>\r\n            </div>\r\n            <Link to=\"/login\" className=\"btn btn-primary\">Login with New Password</Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (step === 'reset' && token) {\r\n    return (\r\n      <div className=\"auth-page\">\r\n        <div className=\"container\">\r\n          <div className=\"auth-form\">\r\n            <h1>Reset Your Password</h1>\r\n            \r\n            <form onSubmit={handleResetSubmit}>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  placeholder=\"New Password (min 6 characters)\"\r\n                  value={resetForm.password}\r\n                  onChange={handleResetChange}\r\n                  className={errors.password ? 'error' : ''}\r\n                  required\r\n                />\r\n                {errors.password && <span className=\"error-text\">{errors.password}</span>}\r\n              </div>\r\n              \r\n              <div className=\"form-group\">\r\n                <input\r\n                  type=\"password\"\r\n                  name=\"confirmPassword\"\r\n                  placeholder=\"Confirm New Password\"\r\n                  value={resetForm.confirmPassword}\r\n                  onChange={handleResetChange}\r\n                  className={errors.confirmPassword ? 'error' : ''}\r\n                  required\r\n                />\r\n                {errors.confirmPassword && <span className=\"error-text\">{errors.confirmPassword}</span>}\r\n              </div>\r\n              \r\n              <button type=\"submit\" disabled={loading} className=\"btn btn-primary\">\r\n                {loading ? 'Resetting...' : 'Reset Password'}\r\n              </button>\r\n            </form>\r\n            \r\n            <p>\r\n              <Link to=\"/login\">Back to Login</Link>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"auth-page\">\r\n      <div className=\"container\">\r\n        <div className=\"auth-form\">\r\n          <h1>Reset Password</h1>\r\n          <p>Enter your email address and we'll send you a link to reset your password.</p>\r\n          \r\n          {!recaptchaLoaded && (\r\n            <div className=\"loading-recaptcha\" style={{ margin: '10px 0' }}>\r\n              <p style={{ color: '#666', fontSize: '0.9rem' }}>Loading security verification...</p>\r\n            </div>\r\n          )}\r\n          \r\n          <form onSubmit={handleRequestSubmit}>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"email\"\r\n                name=\"email\"\r\n                placeholder=\"Enter your email address\"\r\n                value={requestForm.email}\r\n                onChange={handleRequestChange}\r\n                className={errors.email ? 'error' : ''}\r\n                required\r\n              />\r\n              {errors.email && <span className=\"error-text\">{errors.email}</span>}\r\n            </div>\r\n            \r\n            {/* Mobile-compatible captcha container */}\r\n            <div className=\"form-group\">\r\n              <div \r\n                ref={recaptchaRef}\r\n                style={{ \r\n                  margin: '10px 0',\r\n                  display: 'flex',\r\n                  justifyContent: 'center'\r\n                }}\r\n              ></div>\r\n              {!recaptchaLoaded && (\r\n                <p style={{ color: '#666', fontSize: '0.9rem', textAlign: 'center' }}>\r\n                  Please wait for security verification to load...\r\n                </p>\r\n              )}\r\n              {errors.captcha && <span className=\"error-text\">{errors.captcha}</span>}\r\n            </div>\r\n            \r\n            <button \r\n              type=\"submit\" \r\n              disabled={loading || !recaptchaLoaded} \r\n              className=\"btn btn-primary\"\r\n            >\r\n              {loading ? 'Sending...' : 'Send Reset Link'}\r\n            </button>\r\n          </form>\r\n          \r\n          <p>\r\n            Remember your password? <Link to=\"/login\">Back to Login</Link>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;"],"names":["API_BASE","process","REACT_APP_API_BASE_URL","ResetPassword","searchParams","useSearchParams","token","get","showToast","useToastContext","step","setStep","useState","loading","setLoading","recaptchaLoaded","setRecaptchaLoaded","recaptchaWidgetId","setRecaptchaWidgetId","recaptchaRef","useRef","requestForm","setRequestForm","email","resetForm","setResetForm","password","confirmPassword","errors","setErrors","useEffect","async","mobileCaptcha","initialize","siteKey","REACT_APP_RECAPTCHA_SITE_KEY","onLoad","onComplete","response","onExpired","error","initializeCaptcha","current","widgetId","render","sitekey","callback","expired-callback","handleResetChange","e","_objectSpread","target","name","value","handleResetSubmit","preventDefault","validateResetForm","newErrors","length","Object","keys","fetch","concat","method","headers","body","JSON","stringify","new_password","data","json","ok","detail","_jsx","className","children","_jsxs","Link","to","style","display","padding","textDecoration","borderRadius","fontWeight","onSubmit","type","placeholder","onChange","required","disabled","margin","color","fontSize","captchaResponse","getResponse","errorMessage","captcha","platformDetection","loadingIndicator","_loadingIndicator","showLoading","present","secureFetch","recaptcha_response","reset","message","includes","status","_loadingIndicator2","dismiss","ref","justifyContent","textAlign"],"sourceRoot":""}