{"version":3,"file":"static/js/152.720afb9e.chunk.js","mappings":"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","sources":["components/TwoFactor/TwoFactorVerification.js","pages/Login.js","pages/Register.js","components/AuthSlider.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport { useToastContext } from '../toast';\r\nimport { secureFetch } from '../../utils/csrf';\r\nimport platformDetection from '../../utils/platformDetection';\r\n\r\nconst API_BASE = process.env.REACT_APP_API_BASE_URL;\r\n\r\nconst TwoFactorVerification = ({ tempToken, onSuccess, onCancel }) => {\r\n  const [code, setCode] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [emailSent, setEmailSent] = useState(false);\r\n  const { login, makeAuthenticatedRequest } = useAuth(); // ✅ Use session auth\r\n  const { showToast } = useToastContext();\r\n\r\n  const sendEmailCode = async () => {\r\n    setLoading(true);\r\n    let loadingIndicator = null;\r\n    \r\n    try {\r\n      // Show platform-appropriate loading\r\n      loadingIndicator = await platformDetection.showLoading('Sending verification code...');\r\n      if (loadingIndicator?.present) await loadingIndicator.present();\r\n\r\n      const response = await secureFetch(`${API_BASE}/auth/send-2fa-email`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({ temp_token: tempToken })\r\n      });\r\n\r\n      if (response.ok) {\r\n        setEmailSent(true);\r\n        showToast('Verification code sent to your email', 'success');\r\n        await platformDetection.showToast('Verification code sent to your email', 3000);\r\n      } else {\r\n        const data = await response.json();\r\n        const errorMessage = data.detail || 'Failed to send email';\r\n        showToast(errorMessage, 'error');\r\n        await platformDetection.showToast(errorMessage, 3000);\r\n      }\r\n    } catch (error) {\r\n      console.error('Email send error:', error);\r\n      \r\n      let errorMessage = 'Failed to send email. Please try again.';\r\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n        errorMessage = 'Connection failed. Please check your internet connection.';\r\n      }\r\n      \r\n      showToast(errorMessage, 'error');\r\n      await platformDetection.showToast(errorMessage, 4000);\r\n    } finally {\r\n      setLoading(false);\r\n      if (loadingIndicator?.dismiss) await loadingIndicator.dismiss();\r\n    }\r\n  };\r\n\r\n  const verify2FA = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    let loadingIndicator = null;\r\n\r\n    try {\r\n      // Show platform-appropriate loading\r\n      loadingIndicator = await platformDetection.showLoading('Verifying code...');\r\n      if (loadingIndicator?.present) await loadingIndicator.present();\r\n\r\n      const response = await secureFetch(`${API_BASE}/auth/verify-2fa`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({ temp_token: tempToken, code })\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        // Store token in localStorage for fallback\r\n        if (data.token) {\r\n          localStorage.setItem('auth_token', data.token);\r\n        }\r\n        \r\n        login(data.user);\r\n        \r\n        if (data.backup_code_used) {\r\n          showToast('Backup code used. Consider regenerating backup codes.', 'info');\r\n          await platformDetection.showToast('Backup code used. Consider regenerating backup codes.', 4000);\r\n        }\r\n        \r\n        await platformDetection.showToast('Verification successful!', 2000);\r\n        onSuccess();\r\n      } else {\r\n        const errorMessage = data.detail || '2FA verification failed';\r\n        showToast(errorMessage, 'error');\r\n        await platformDetection.showToast(errorMessage, 3000);\r\n      }\r\n    } catch (error) {\r\n      console.error('2FA verification error:', error);\r\n      \r\n      let errorMessage = '2FA verification failed. Please try again.';\r\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n        errorMessage = 'Connection failed. Please check your internet connection.';\r\n      }\r\n      \r\n      showToast(errorMessage, 'error');\r\n      await platformDetection.showToast(errorMessage, 4000);\r\n    } finally {\r\n      setLoading(false);\r\n      if (loadingIndicator?.dismiss) await loadingIndicator.dismiss();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"auth-page\">\r\n      <div className=\"container\">\r\n        <div className=\"auth-form\">\r\n          <h1>🔐 Two-Factor Authentication</h1>\r\n          \r\n          <form onSubmit={verify2FA}>\r\n            <p>Enter your verification code:</p>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"000000 or backup code\"\r\n              value={code}\r\n              onChange={(e) => setCode(e.target.value)}\r\n              required\r\n              autoFocus\r\n            />\r\n            <button type=\"submit\" disabled={loading || !code} className=\"btn btn-primary\">\r\n              {loading ? 'Verifying...' : 'Verify'}\r\n            </button>\r\n          </form>\r\n          \r\n          <div style={{ margin: '1rem 0', textAlign: 'center' }}>\r\n            <button \r\n              onClick={sendEmailCode}\r\n              className=\"btn btn-outline\"\r\n              disabled={loading || emailSent}\r\n              style={{ fontSize: '0.9rem' }}\r\n            >\r\n              {emailSent ? 'Email Sent ✓' : '📧 Send Code to Email'}\r\n            </button>\r\n          </div>\r\n          \r\n          <p style={{ marginTop: '20px', fontSize: '0.9rem', color: '#666', textAlign: 'center' }}>\r\n            Lost access? Use a backup code to sign in.\r\n          </p>\r\n          \r\n          {onCancel && (\r\n            <div style={{ textAlign: 'center', marginTop: '1rem' }}>\r\n              <button \r\n                onClick={onCancel}\r\n                className=\"btn btn-outline\"\r\n                style={{ fontSize: '0.9rem' }}\r\n              >\r\n                ← Back to Login\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TwoFactorVerification;","import React, { useState, useEffect, useRef } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport TwoFactorVerification from '../components/TwoFactor/TwoFactorVerification';\r\nimport { useToastContext } from '../components/toast';\r\nimport mobileCaptcha from '../utils/mobileCaptcha';\r\nimport { secureFetch } from '../utils/csrf';\r\nimport platformDetection from '../utils/platformDetection';\r\nimport '../styles/mobileCaptcha.css';\r\n\r\n\r\nconst API_BASE = process.env.REACT_APP_API_BASE_URL;\r\n\r\nconst Login = ({ isSliderMode = false }) => {\r\n  const [formData, setFormData] = useState({\r\n    identifier: '',\r\n    password: ''\r\n  });\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [show2FA, setShow2FA] = useState(false);\r\n  const [tempToken, setTempToken] = useState('');\r\n  const [twoFactorMethod, setTwoFactorMethod] = useState('');\r\n  const [recaptchaLoaded, setRecaptchaLoaded] = useState(false);\r\n  const [recaptchaWidgetId, setRecaptchaWidgetId] = useState(null);\r\n  const { login, refetchUser } = useAuth();\r\n  const { showToast } = useToastContext();\r\n  const navigate = useNavigate();\r\n  const recaptchaRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const initializeCaptcha = async () => {\r\n      console.log('🚀 Login: Starting captcha initialization...');\r\n      \r\n      try {\r\n        await mobileCaptcha.initialize({\r\n          siteKey: process.env.REACT_APP_RECAPTCHA_SITE_KEY,\r\n          onLoad: () => {\r\n            console.log('✅ Login: Captcha loaded successfully');\r\n            setRecaptchaLoaded(true);\r\n          },\r\n          onComplete: (response) => {\r\n            console.log('✅ Login: Captcha completed:', response);\r\n          },\r\n          onExpired: () => {\r\n            console.log('⏰ Login: Captcha expired');\r\n            showToast('Security verification expired. Please complete it again.', 'warning');\r\n          }\r\n        });\r\n        console.log('✅ Login: Captcha initialization completed');\r\n      } catch (error) {\r\n        console.error('❌ Login: Failed to initialize captcha:', error);\r\n        \r\n        // More specific error messages\r\n        let errorMessage = 'Failed to load security verification.';\r\n        if (error.message.includes('reCAPTCHA')) {\r\n          errorMessage = 'Failed to load reCAPTCHA. Using simplified verification.';\r\n        } else if (error.message.includes('network')) {\r\n          errorMessage = 'Network error loading security verification. Please check your connection.';\r\n        }\r\n        \r\n        showToast(errorMessage, 'error');\r\n        await platformDetection.showToast(errorMessage, 4000);\r\n        \r\n        // Force recaptcha loaded to true to allow fallback\r\n        console.log('🔄 Login: Setting recaptchaLoaded to true for fallback');\r\n        setRecaptchaLoaded(true);\r\n      }\r\n    };\r\n\r\n    initializeCaptcha();\r\n  }, [showToast]);\r\n\r\n  useEffect(() => {\r\n    if (recaptchaLoaded && recaptchaRef.current && !recaptchaWidgetId && !show2FA) {\r\n      console.log('🎨 Login: Attempting to render captcha widget');\r\n      \r\n      try {\r\n        const widgetId = mobileCaptcha.render(recaptchaRef.current, {\r\n          sitekey: process.env.REACT_APP_RECAPTCHA_SITE_KEY,\r\n          callback: (response) => {\r\n            console.log('✅ Login: Captcha completed:', response);\r\n          },\r\n          'expired-callback': () => {\r\n            console.log('⏰ Login: Captcha expired');\r\n            showToast('Security verification expired. Please complete it again.', 'warning');\r\n          }\r\n        });\r\n        \r\n        console.log('✅ Login: Captcha widget rendered with ID:', widgetId);\r\n        setRecaptchaWidgetId(widgetId);\r\n      } catch (error) {\r\n        console.error('❌ Login: Captcha render error:', error);\r\n        \r\n        let errorMessage = 'Failed to load security verification.';\r\n        if (error.message.includes('not initialized')) {\r\n          errorMessage = 'Security verification not ready. Please wait a moment.';\r\n          \r\n          // Try again after a short delay\r\n          setTimeout(() => {\r\n            try {\r\n              const widgetId = mobileCaptcha.render(recaptchaRef.current, {\r\n                sitekey: process.env.REACT_APP_RECAPTCHA_SITE_KEY,\r\n                callback: (response) => {\r\n                  console.log('✅ Login: Captcha completed (retry):', response);\r\n                },\r\n                'expired-callback': () => {\r\n                  console.log('⏰ Login: Captcha expired (retry)');\r\n                  showToast('Security verification expired. Please complete it again.', 'warning');\r\n                }\r\n              });\r\n              console.log('✅ Login: Captcha widget rendered on retry with ID:', widgetId);\r\n              setRecaptchaWidgetId(widgetId);\r\n            } catch (retryError) {\r\n              console.error('❌ Login: Captcha render retry failed:', retryError);\r\n              showToast('Security verification unavailable. Please refresh the page.', 'error');\r\n            }\r\n          }, 1000);\r\n        } else {\r\n          showToast(errorMessage, 'error');\r\n        }\r\n      }\r\n    }\r\n  }, [recaptchaLoaded, show2FA, showToast]);\r\n\r\n  useEffect(() => {\r\n    const script = document.createElement('script');\r\n    script.src = 'https://accounts.google.com/gsi/client';\r\n    script.async = true;\r\n    script.defer = true;\r\n    document.head.appendChild(script);\r\n\r\n    script.onload = () => {\r\n      if (window.google && process.env.REACT_APP_GOOGLE_CLIENT_ID) {\r\n        window.google.accounts.id.initialize({\r\n          client_id: process.env.REACT_APP_GOOGLE_CLIENT_ID,\r\n          callback: handleGoogleLogin\r\n        });\r\n        \r\n        window.google.accounts.id.renderButton(\r\n          document.getElementById('google-signin-button'),\r\n          { theme: 'outline', size: 'large', width: isSliderMode ? 300 : 350 }\r\n        );\r\n      }\r\n    };\r\n\r\n    return () => {\r\n      document.head.removeChild(script);\r\n    };\r\n  }, [isSliderMode]);\r\n\r\n  const handleGoogleLogin = async (response) => {\r\n    let loadingIndicator = null;\r\n    \r\n    try {\r\n      // Show platform-appropriate loading\r\n      loadingIndicator = await platformDetection.showLoading('Authenticating with Google...');\r\n      if (loadingIndicator?.present) await loadingIndicator.present();\r\n\r\n      const apiResponse = await secureFetch(`${API_BASE}/auth/google`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({ token: response.credential }),\r\n      });\r\n\r\n      const data = await apiResponse.json();\r\n\r\n      if (apiResponse.ok) {\r\n        if (data.requires_2fa) {\r\n          setTempToken(data.temp_token);\r\n          setTwoFactorMethod(data.method || 'app');\r\n          setShow2FA(true);\r\n        } else {\r\n          if (data.token) {\r\n            localStorage.setItem('auth_token', data.token);\r\n          }\r\n          login(data.user);\r\n          \r\n          // Show success toast\r\n          await platformDetection.showToast('Login successful!', 2000);\r\n          navigate('/');\r\n        }\r\n      } else {\r\n        setError(data.detail || 'Google login failed');\r\n        await platformDetection.showToast(data.detail || 'Google login failed', 3000);\r\n      }\r\n    } catch (error) {\r\n      console.error('Google login error:', error);\r\n      const errorMessage = 'Google login failed. Please try again.';\r\n      setError(errorMessage);\r\n      await platformDetection.showToast(errorMessage, 3000);\r\n    } finally {\r\n      if (loadingIndicator?.dismiss) await loadingIndicator.dismiss();\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setFormData({\r\n      ...formData,\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n\r\n    let captchaResponse = '';\r\n    try {\r\n      captchaResponse = mobileCaptcha.getResponse(recaptchaWidgetId);\r\n    } catch (error) {\r\n      console.error('Captcha error:', error);\r\n    }\r\n\r\n    if (!captchaResponse) {\r\n      const errorMessage = 'Please complete the security verification';\r\n      setError(errorMessage);\r\n      await platformDetection.showToast(errorMessage, 3000);\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    let loadingIndicator = null;\r\n\r\n    try {\r\n      // Show platform-appropriate loading\r\n      loadingIndicator = await platformDetection.showLoading('Signing in...');\r\n      if (loadingIndicator?.present) await loadingIndicator.present();\r\n\r\n      const response = await secureFetch(`${API_BASE}/auth/login`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          ...formData,\r\n          recaptcha_response: captchaResponse\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        if (data.requires_2fa) {\r\n          setTempToken(data.temp_token);\r\n          setTwoFactorMethod(data.method || 'app');\r\n          setShow2FA(true);\r\n          \r\n          const message = data.method === 'email' \r\n            ? 'Verification code sent to your email' \r\n            : 'Please enter your 2FA code';\r\n          \r\n          showToast(message, 'info');\r\n          await platformDetection.showToast(message, 3000);\r\n        } else {\r\n          login(data.user);\r\n          await platformDetection.showToast('Login successful!', 2000);\r\n          navigate('/');\r\n        }\r\n      } else {\r\n        const errorMessage = data.detail || 'Login failed';\r\n        setError(errorMessage);\r\n        \r\n        if (data.detail && data.detail.includes('Email not verified')) {\r\n          showToast('Please verify your email address', 'error');\r\n        }\r\n        \r\n        await platformDetection.showToast(errorMessage, 3000);\r\n        \r\n        if (recaptchaWidgetId !== null) {\r\n          mobileCaptcha.reset(recaptchaWidgetId);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      \r\n      // Enhanced error handling for mobile\r\n      let errorMessage = 'Network error. Please try again.';\r\n      \r\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n        errorMessage = 'Connection failed. Please check your internet connection.';\r\n      } else if (error.status === 429) {\r\n        errorMessage = 'Too many login attempts. Please try again later.';\r\n      } else if (error.status >= 500) {\r\n        errorMessage = 'Server error. Please try again later.';\r\n      }\r\n      \r\n      setError(errorMessage);\r\n      await platformDetection.showToast(errorMessage, 4000);\r\n      \r\n      if (recaptchaWidgetId !== null) {\r\n        mobileCaptcha.reset(recaptchaWidgetId);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n      if (loadingIndicator?.dismiss) await loadingIndicator.dismiss();\r\n    }\r\n  };\r\n\r\n  const handle2FASuccess = () => {\r\n    setShow2FA(false);\r\n    setTempToken('');\r\n    setTwoFactorMethod('');\r\n    navigate('/');\r\n  };\r\n\r\n  const handle2FACancel = () => {\r\n    setShow2FA(false);\r\n    setTempToken('');\r\n    setTwoFactorMethod('');\r\n  };\r\n\r\n  if (show2FA) {\r\n    return (\r\n      <TwoFactorVerification \r\n        tempToken={tempToken}\r\n        method={twoFactorMethod}\r\n        onSuccess={handle2FASuccess}\r\n        onCancel={handle2FACancel}\r\n      />\r\n    );\r\n  }\r\n\r\n  // Slider mode layout\r\n  if (isSliderMode) {\r\n    return (\r\n      <div className=\"auth-form\">\r\n        <h1>Login</h1>\r\n        \r\n        {error && <div className=\"error-message\">{error}</div>}\r\n        \r\n        {!recaptchaLoaded && (\r\n          <div className=\"loading-recaptcha\">\r\n            <p>Loading security verification...</p>\r\n          </div>\r\n        )}\r\n        \r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form-group with-icon\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"identifier\"\r\n              placeholder=\"Email, Username, or Phone\"\r\n              value={formData.identifier}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n            <i className=\"bx bxs-user\"></i>\r\n          </div>\r\n          \r\n          <div className=\"form-group with-icon\">\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              placeholder=\"Password\"\r\n              value={formData.password}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n            <i className=\"bx bxs-lock-alt\"></i>\r\n          </div>\r\n          \r\n          <div className=\"forgot-link\">\r\n            <Link to=\"/reset-password\">Forgot Password?</Link>\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <div \r\n              ref={recaptchaRef}\r\n              style={{ \r\n                margin: '10px 0',\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                transform: 'scale(0.9)',\r\n                transformOrigin: 'center'\r\n              }}\r\n            ></div>\r\n            {!recaptchaLoaded && (\r\n              <p style={{ color: '#666', fontSize: '0.9rem', textAlign: 'center' }}>\r\n                Please wait for security verification to load...\r\n              </p>\r\n            )}\r\n          </div>\r\n          \r\n          <button \r\n            type=\"submit\" \r\n            disabled={loading || !recaptchaLoaded} \r\n            className=\"btn\"\r\n          >\r\n            {loading ? 'Logging in...' : 'Login'}\r\n          </button>\r\n        </form>\r\n\r\n        <p>or login with social platforms</p>\r\n        \r\n        <div className=\"social-icons\">\r\n          <a href=\"#\"><i className=\"bx bxl-google\"></i></a>\r\n          <a href=\"#\"><i className=\"bx bxl-facebook\"></i></a>\r\n          <a href=\"#\"><i className=\"bx bxl-github\"></i></a>\r\n          <a href=\"#\"><i className=\"bx bxl-linkedin\"></i></a>\r\n        </div>\r\n\r\n        <div className=\"google-login\">\r\n          <div id=\"google-signin-button\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Regular standalone page layout\r\n  return (\r\n    <div className=\"auth-page\">\r\n      <div className=\"container\">\r\n        <div className=\"auth-form\">\r\n          <h1>Login</h1>\r\n          \r\n          {error && <div className=\"error-message\">{error}</div>}\r\n          \r\n          {!recaptchaLoaded && (\r\n            <div className=\"loading-recaptcha\">\r\n              <p>Loading security verification...</p>\r\n            </div>\r\n          )}\r\n          \r\n          <form onSubmit={handleSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              name=\"identifier\"\r\n              placeholder=\"Email, Username, or Phone\"\r\n              value={formData.identifier}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              placeholder=\"Password\"\r\n              value={formData.password}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n            \r\n            <div className=\"form-group\">\r\n              <div \r\n                ref={recaptchaRef}\r\n                style={{ margin: '10px 0' }}\r\n              ></div>\r\n              {!recaptchaLoaded && (\r\n                <p style={{ color: '#666', fontSize: '0.9rem' }}>\r\n                  Please wait for security verification to load...\r\n                </p>\r\n              )}\r\n            </div>\r\n            \r\n            <button \r\n              type=\"submit\" \r\n              disabled={loading || !recaptchaLoaded} \r\n              className=\"btn btn-primary\"\r\n            >\r\n              {loading ? 'Logging in...' : 'Login'}\r\n            </button>\r\n          </form>\r\n\r\n          <p className=\"forgot-password\">\r\n            <Link to=\"/reset-password\">Forgotten password? Click here to reset</Link>\r\n          </p>\r\n\r\n          <div className=\"divider\">\r\n            <span>OR</span>\r\n          </div>\r\n\r\n          <div className=\"google-login\">\r\n            <div id=\"google-signin-button\"></div>\r\n          </div>\r\n\r\n          <p>\r\n            Don't have an account? <Link to=\"/register\">Register here</Link>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;","import React, { useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { useToastContext } from '../components/toast';\r\nimport SecureForm from '../components/SecureForm';\r\nimport { secureFetch } from '../utils/csrf';\r\nimport platformDetection from '../utils/platformDetection';\r\n\r\n\r\nconst Register = ({ isSliderMode = false }) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [countryCode, setCountryCode] = useState('+40');\r\n  const [phoneNumber, setPhoneNumber] = useState('');\r\n  const { showToast } = useToastContext();\r\n  const navigate = useNavigate();\r\n\r\n  const handlePhoneNumberChange = (e) => {\r\n    const value = e.target.value.replace(/\\D/g, '').substring(0, 9);\r\n    setPhoneNumber(value);\r\n  };\r\n\r\n  const getFullPhoneNumber = () => {\r\n    return phoneNumber ? `${countryCode}${phoneNumber}` : '';\r\n  };\r\n\r\n  const validatePhone = (phone) => {\r\n    return /^\\+\\d{2,4}\\d{9}$/.test(phone);\r\n  };\r\n\r\n  const handleSubmit = async (sanitizedData, csrfToken) => {\r\n    setLoading(true);\r\n    let loadingIndicator = null;\r\n    \r\n    const formDataWithPhone = {\r\n      ...sanitizedData,\r\n      phone: getFullPhoneNumber()\r\n    };\r\n    \r\n    try {\r\n      // Show platform-appropriate loading\r\n      loadingIndicator = await platformDetection.showLoading('Creating account...');\r\n      if (loadingIndicator?.present) await loadingIndicator.present();\r\n\r\n      const response = await secureFetch(\r\n        `${process.env.REACT_APP_API_BASE_URL}/auth/register`,\r\n        {\r\n          method: 'POST',\r\n          body: JSON.stringify(formDataWithPhone),\r\n        }\r\n      );\r\n\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        const successMessage = result.message ||\r\n          'Registration successful! Please check your email to verify your account.';\r\n        \r\n        showToast(successMessage, 'success');\r\n        await platformDetection.showToast(successMessage, 3000);\r\n        navigate('/login');\r\n      } else {\r\n        const error = await response.json();\r\n        const errorMessage = error.detail || 'Registration failed';\r\n        showToast(errorMessage, 'error');\r\n        await platformDetection.showToast(errorMessage, 3000);\r\n      }\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      \r\n      // Enhanced mobile error handling\r\n      let errorMessage = 'Registration failed. Please try again.';\r\n      \r\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n        errorMessage = 'Connection failed. Please check your internet connection.';\r\n      } else if (error.status === 429) {\r\n        errorMessage = 'Too many requests. Please try again later.';\r\n      } else if (error.status >= 500) {\r\n        errorMessage = 'Server error. Please try again later.';\r\n      } else if (error.message) {\r\n        errorMessage = error.message;\r\n      }\r\n      \r\n      showToast(errorMessage, 'error');\r\n      await platformDetection.showToast(errorMessage, 4000);\r\n    } finally {\r\n      setLoading(false);\r\n      if (loadingIndicator?.dismiss) await loadingIndicator.dismiss();\r\n    }\r\n  };\r\n\r\n  const validateForm = (formData) => {\r\n    const errors = {};\r\n\r\n    if (!formData.username || formData.username.length < 3) {\r\n      errors.username = 'Username must be at least 3 characters';\r\n    }\r\n\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!formData.email || !emailRegex.test(formData.email)) {\r\n      errors.email = 'Please enter a valid email address';\r\n    }\r\n\r\n    if (!formData.password || formData.password.length < 8) {\r\n      errors.password = 'Password must be at least 8 characters';\r\n    }\r\n\r\n    if (!phoneNumber || phoneNumber.length !== 9) {\r\n      errors.phone = 'Phone number must be exactly 9 digits';\r\n    }\r\n\r\n    if (!formData.full_name || formData.full_name.trim().length < 2) {\r\n      errors.full_name = 'Full name must be at least 2 characters';\r\n    }\r\n\r\n    return errors;\r\n  };\r\n\r\n  // Slider mode layout\r\n  if (isSliderMode) {\r\n    return (\r\n      <div className=\"auth-form\">\r\n        <h1>Registration</h1>\r\n        <SecureForm onSubmit={handleSubmit} validate={validateForm}>\r\n          <div className=\"form-group with-icon\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"username\"\r\n              placeholder=\"Username\"\r\n              minLength={3}\r\n              maxLength={50}\r\n              pattern=\"^[a-zA-Z][a-zA-Z0-9_-]*$\"\r\n              title=\"Username must start with a letter and contain only letters, numbers, underscore, and hyphen\"\r\n              required\r\n            />\r\n            <i className=\"bx bxs-user\"></i>\r\n          </div>\r\n          \r\n          <div className=\"form-group with-icon\">\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              placeholder=\"Email\"\r\n              maxLength={254}\r\n              required\r\n            />\r\n            <i className=\"bx bxs-envelope\"></i>\r\n          </div>\r\n          \r\n          <div className=\"form-group with-icon\">\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              placeholder=\"Password\"\r\n              minLength={8}\r\n              maxLength={128}\r\n              title=\"Password must be at least 8 characters with uppercase, lowercase, number, and special character\"\r\n              required\r\n            />\r\n            <i className=\"bx bxs-lock-alt\"></i>\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"full_name\"\r\n              placeholder=\"Full Name\"\r\n              minLength={2}\r\n              maxLength={100}\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"address\"\r\n              placeholder=\"Address (optional)\"\r\n              maxLength={500}\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <div className=\"phone-input-group\">\r\n              <select\r\n                value={countryCode}\r\n                onChange={(e) => setCountryCode(e.target.value)}\r\n              >\r\n                <option value=\"+40\">🇷🇴 +40</option>\r\n                <option value=\"+1\">🇺🇸 +1</option>\r\n                <option value=\"+44\">🇬🇧 +44</option>\r\n                <option value=\"+49\">🇩🇪 +49</option>\r\n                <option value=\"+33\">🇫🇷 +33</option>\r\n                <option value=\"+39\">🇮🇹 +39</option>\r\n                <option value=\"+34\">🇪🇸 +34</option>\r\n              </select>\r\n              <input\r\n                type=\"tel\"\r\n                placeholder=\"723423225\"\r\n                value={phoneNumber}\r\n                onChange={handlePhoneNumberChange}\r\n                maxLength={9}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"phone-info\">\r\n              📱 Enter 9 digits (without the leading 0). Example: 723423225\r\n            </div>\r\n            {phoneNumber && (\r\n              <div className=\"phone-preview\">\r\n                Full number: <strong>{getFullPhoneNumber()}</strong>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <button type=\"submit\" disabled={loading} className=\"btn\">\r\n            {loading ? 'Registering...' : 'Register'}\r\n          </button>\r\n        </SecureForm>\r\n        \r\n        <p>or register with social platforms</p>\r\n        \r\n        <div className=\"social-icons\">\r\n          <a href=\"#\"><i className=\"bx bxl-google\"></i></a>\r\n          <a href=\"#\"><i className=\"bx bxl-facebook\"></i></a>\r\n          <a href=\"#\"><i className=\"bx bxl-github\"></i></a>\r\n          <a href=\"#\"><i className=\"bx bxl-linkedin\"></i></a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Regular standalone page layout\r\n  return (\r\n    <div className=\"auth-page\">\r\n      <div className=\"container\">\r\n        <div className=\"auth-form\">\r\n          <h1>Register</h1>\r\n          <SecureForm onSubmit={handleSubmit} validate={validateForm}>\r\n            <input\r\n              type=\"text\"\r\n              name=\"username\"\r\n              placeholder=\"Username (3-50 characters)\"\r\n              minLength={3}\r\n              maxLength={50}\r\n              pattern=\"^[a-zA-Z][a-zA-Z0-9_-]*$\"\r\n              title=\"Username must start with a letter and contain only letters, numbers, underscore, and hyphen\"\r\n              required\r\n            />\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              placeholder=\"Email Address\"\r\n              maxLength={254}\r\n              required\r\n            />\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              placeholder=\"Password (min 8 chars with uppercase, lowercase, number, special char)\"\r\n              minLength={8}\r\n              maxLength={128}\r\n              title=\"Password must be at least 8 characters with uppercase, lowercase, number, and special character\"\r\n              required\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              name=\"full_name\"\r\n              placeholder=\"Full Name\"\r\n              minLength={2}\r\n              maxLength={100}\r\n              required\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              name=\"address\"\r\n              placeholder=\"Address (optional)\"\r\n              maxLength={500}\r\n            />\r\n            \r\n            <div style={{ marginBottom: '1rem' }}>\r\n              <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>\r\n                Phone Number *\r\n              </label>\r\n              <div style={{ display: 'flex', gap: '0.5rem' }}>\r\n                <select\r\n                  value={countryCode}\r\n                  onChange={(e) => setCountryCode(e.target.value)}\r\n                  style={{\r\n                    padding: '0.75rem',\r\n                    border: '2px solid #e5e5e5',\r\n                    borderRadius: '5px',\r\n                    fontSize: '1rem',\r\n                    width: '120px',\r\n                    backgroundColor: 'white'\r\n                  }}\r\n                >\r\n                  <option value=\"+40\">🇷🇴 +40</option>\r\n                  <option value=\"+1\">🇺🇸 +1</option>\r\n                  <option value=\"+44\">🇬🇧 +44</option>\r\n                  <option value=\"+49\">🇩🇪 +49</option>\r\n                  <option value=\"+33\">🇫🇷 +33</option>\r\n                  <option value=\"+39\">🇮🇹 +39</option>\r\n                  <option value=\"+34\">🇪🇸 +34</option>\r\n                </select>\r\n                <input\r\n                  type=\"tel\"\r\n                  placeholder=\"723423225\"\r\n                  value={phoneNumber}\r\n                  onChange={handlePhoneNumberChange}\r\n                  maxLength={9}\r\n                  style={{\r\n                    flex: 1,\r\n                    padding: '0.75rem',\r\n                    border: '2px solid #e5e5e5',\r\n                    borderRadius: '5px',\r\n                    fontSize: '1rem',\r\n                    fontFamily: 'monospace'\r\n                  }}\r\n                  required\r\n                />\r\n              </div>\r\n              <p style={{ fontSize: '0.85rem', color: '#666', margin: '0.25rem 0 0 0' }}>\r\n                📱 Enter 9 digits (without the leading 0). Example: 723423225\r\n              </p>\r\n              {phoneNumber && (\r\n                <p style={{ fontSize: '0.85rem', color: '#007bff', margin: '0.25rem 0 0 0' }}>\r\n                  Full number: <strong>{getFullPhoneNumber()}</strong>\r\n                </p>\r\n              )}\r\n            </div>\r\n\r\n            <button type=\"submit\" disabled={loading} className=\"btn btn-primary\">\r\n              {loading ? 'Registering...' : 'Register'}\r\n            </button>\r\n          </SecureForm>\r\n          <p>\r\n            Already have an account? <Link to=\"/login\">Login here</Link>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;","import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport Login from '../pages/Login';\r\nimport Register from '../pages/Register';\r\n\r\n\r\nconst AuthSlider = () => {\r\n  const [isRegisterMode, setIsRegisterMode] = useState(false);\r\n  const location = useLocation();\r\n\r\n  // Set initial mode based on route\r\n  useEffect(() => {\r\n    setIsRegisterMode(location.pathname === '/register');\r\n  }, [location.pathname]);\r\n\r\n  const toggleMode = () => {\r\n    setIsRegisterMode(!isRegisterMode);\r\n  };\r\n\r\n  return (\r\n    <div className=\"auth-page\">\r\n      <div className={`auth-container ${isRegisterMode ? 'active register-mode' : ''}`}>\r\n        {/* Login Form */}\r\n        <div className=\"auth-form-box login\">\r\n          <Login isSliderMode={true} />\r\n        </div>\r\n\r\n        {/* Register Form */}\r\n        <div className=\"auth-form-box register\">\r\n          <Register isSliderMode={true} />\r\n        </div>\r\n\r\n        {/* Toggle Panels */}\r\n        <div className=\"toggle-box\">\r\n          <div className=\"toggle-panel toggle-left\">\r\n            <h1>Hello, Welcome!</h1>\r\n            <p>Don't have an account?</p>\r\n            <button className=\"btn\" onClick={toggleMode}>\r\n              Register\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"toggle-panel toggle-right\">\r\n            <h1>Welcome Back!</h1>\r\n            <p>Already have an account?</p>\r\n            <button className=\"btn\" onClick={toggleMode}>\r\n              Login\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthSlider;"],"names":["API_BASE","process","REACT_APP_API_BASE_URL","_ref","tempToken","onSuccess","onCancel","code","setCode","useState","loading","setLoading","emailSent","setEmailSent","login","makeAuthenticatedRequest","useAuth","showToast","useToastContext","_jsx","className","children","_jsxs","onSubmit","async","e","preventDefault","loadingIndicator","_loadingIndicator3","platformDetection","showLoading","present","response","secureFetch","concat","method","body","JSON","stringify","temp_token","data","json","ok","token","localStorage","setItem","user","backup_code_used","errorMessage","detail","error","name","message","includes","_loadingIndicator4","dismiss","type","placeholder","value","onChange","target","required","autoFocus","disabled","style","margin","textAlign","onClick","_loadingIndicator","_loadingIndicator2","fontSize","marginTop","color","isSliderMode","formData","setFormData","identifier","password","setError","show2FA","setShow2FA","setTempToken","twoFactorMethod","setTwoFactorMethod","recaptchaLoaded","setRecaptchaLoaded","recaptchaWidgetId","setRecaptchaWidgetId","refetchUser","navigate","useNavigate","recaptchaRef","useRef","useEffect","mobileCaptcha","initialize","siteKey","REACT_APP_RECAPTCHA_SITE_KEY","onLoad","onComplete","onExpired","initializeCaptcha","current","widgetId","render","sitekey","callback","expired-callback","setTimeout","retryError","script","document","createElement","src","defer","head","appendChild","onload","window","google","REACT_APP_GOOGLE_CLIENT_ID","accounts","id","client_id","handleGoogleLogin","renderButton","getElementById","theme","size","width","removeChild","apiResponse","credential","requires_2fa","handleChange","_objectSpread","handleSubmit","captchaResponse","getResponse","recaptcha_response","reset","status","handle2FASuccess","handle2FACancel","TwoFactorVerification","Link","to","ref","display","justifyContent","transform","transformOrigin","href","countryCode","setCountryCode","phoneNumber","setPhoneNumber","handlePhoneNumberChange","replace","substring","getFullPhoneNumber","sanitizedData","csrfToken","formDataWithPhone","phone","successMessage","validateForm","errors","username","length","email","test","full_name","trim","SecureForm","validate","minLength","maxLength","pattern","title","marginBottom","fontWeight","gap","padding","border","borderRadius","backgroundColor","flex","fontFamily","AuthSlider","isRegisterMode","setIsRegisterMode","location","useLocation","pathname","toggleMode","Login","Register"],"sourceRoot":""}